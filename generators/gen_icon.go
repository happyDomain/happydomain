// Copyright or Â© or Copr. happyDNS (2020)
//
// contact@happydns.org
//
// This software is a computer program whose purpose is to provide a modern
// interface to interact with DNS systems.
//
// This software is governed by the CeCILL license under French law and abiding
// by the rules of distribution of free software.  You can use, modify and/or
// redistribute the software under the terms of the CeCILL license as
// circulated by CEA, CNRS and INRIA at the following URL
// "http://www.cecill.info".
//
// As a counterpart to the access to the source code and rights to copy, modify
// and redistribute granted by the license, users are provided only with a
// limited warranty and the software's author, the holder of the economic
// rights, and the successive licensors have only limited liability.
//
// In this respect, the user's attention is drawn to the risks associated with
// loading, using, modifying and/or developing or reproducing the software by
// the user in light of its specific status of free software, that may mean
// that it is complicated to manipulate, and that also therefore means that it
// is reserved for developers and experienced professionals having in-depth
// computer knowledge. Users are therefore encouraged to load and test the
// software's suitability as regards their requirements in conditions enabling
// the security of their systems and/or data to be ensured and, more generally,
// to use and operate it in the same conditions as regards security.
//
// The fact that you are presently reading this means that you have had
// knowledge of the CeCILL license and that you accept its terms.

package main

// +build ignore

import (
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

const tpl = `// Code generated by go generate. DO NOT EDIT.
// sources:
{{ range $idx, $path := .Sources }}// {{ $path }}
{{ end }}
package {{ .Package }} // import "happydns.org/{{ .Directory }}"

var Icons = map[string][]byte{
{{ range $file, $content := .Map }}  {{printf "%q" $file}}: []byte({{printf "%q" $content}}),
{{ end }}}
`

var bundleTpl = template.Must(template.New("").Parse(tpl))

type valTpl struct {
	Directory string
	Package   string
	Sources   []string
	Map       map[string][]byte
}

func main() {
	dir := os.Args[1]
	pkg := os.Args[2]

	srcFiles, err := filepath.Glob(dir + "/*/*.png")
	if err != nil {
		panic(err)
	}

	d := valTpl{
		Directory: dir,
		Package:   pkg,
		Sources:   []string{},
		Map:       map[string][]byte{},
	}

	for _, srcFile := range srcFiles {
		data, err := ioutil.ReadFile(srcFile)
		if err != nil {
			panic(err)
		}

		d.Sources = append(d.Sources, srcFile)
		d.Map[strings.Replace(strings.TrimPrefix(strings.TrimSuffix(srcFile, ".png"), "sources/"), "/", ".", -1)] = data
	}

	f, err := os.Create(dir + "/icons.go")
	if err != nil {
		panic(err)
	}
	defer f.Close()

	bundleTpl.Execute(f, d)
}
