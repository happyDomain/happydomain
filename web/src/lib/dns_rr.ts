// This file is generated by go generate
// Last generation: Wed Jun 18 02:43:56 CEST 2025

export interface SVCBKeyValue {};

export interface EDNS0 {};

export interface dnsRR {
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Flag?: number;
    Tag?: string;
    Value?: string | Array<SVCBKeyValue>;
    Address?: string | number;
    SubAddress?: string;
    Usage?: number;
    Selector?: number;
    MatchingType?: number;
    Certificate?: string;
    A?: string;
    Txt?: string;
    Gid?: number;
    PublicKey?: string;
    Priority?: number;
    Weight?: number;
    Port?: number;
    Target?: string;
    Algorithm?: number | string;
    Type?: number;
    FingerPrint?: string;
    KeyTag?: number;
    DigestType?: number;
    Digest?: string;
    Flags?: number | string;
    Protocol?: number;
    Mf?: string;
    Ns?: string;
    Data?: string;
    Preference?: number;
    Host?: string;
    Subtype?: number;
    Hostname?: string;
    Precedence?: number;
    GatewayType?: number;
    GatewayAddr?: string;
    GatewayHost?: string;
    Mr?: string;
    Md?: string;
    NextDomain?: string;
    TypeBitMap?: Array<number>;
    NodeID?: number;
    Ptr?: string;
    Option?: Array<EDNS0>;
    Map822?: string;
    Mapx400?: string;
    PSDNAddress?: string;
    Exchanger?: string;
    Locator64?: number;
    Endpoint?: string;
    Mbox?: string;
    Serial?: number;
    Refresh?: number;
    Retry?: number;
    Expire?: number;
    Minttl?: number;
    Version?: number;
    Size?: number;
    HorizPre?: number;
    VertPre?: number;
    Latitude?: number | string;
    Longitude?: number | string;
    Altitude?: number | string;
    Mx?: string;
    PreviousName?: string;
    NextName?: string;
    Scheme?: number;
    Hash?: number;
    Prefixes?: Array<{
            Negation: boolean;
            Network: {
                IP: string;
                Mask: Array<number>;
            };
        }>;
    Fqdn?: string;
    Mb?: string;
    Locator?: string;
    Iterations?: number;
    SaltLength?: number;
    Salt?: string;
    HashLength?: number;
    Order?: number;
    Service?: string;
    Regexp?: string;
    Replacement?: string;
    Uid?: number;
    Uinfo?: string;
    Cpu?: string;
    Os?: string;
    ZSData?: Array<string>;
    Locator32?: string;
    TimeSigned?: number;
    Fudge?: number;
    MACSize?: number;
    MAC?: string;
    OrigId?: number;
    Error?: number;
    OtherLen?: number;
    OtherData?: string;
    AAAA?: string;
    HitLength?: number;
    PublicKeyAlgorithm?: number;
    PublicKeyLength?: number;
    Hit?: string;
    RendezvousServers?: Array<string>;
    Rmail?: string;
    Email?: string;
    TypeCovered?: number;
    Labels?: number;
    OrigTtl?: number;
    Expiration?: number;
    Inception?: number;
    SignerName?: string;
    Signature?: string;
    Mg?: string;
    Mode?: number;
    KeySize?: number;
    Key?: string;
};

export interface dnsTypeAAAA{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    AAAA: string;
};

export interface dnsTypeHIP{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    HitLength: number;
    PublicKeyAlgorithm: number;
    PublicKeyLength: number;
    Hit: string;
    PublicKey: string;
    RendezvousServers: Array<string>;
};

export interface dnsTypeKEY{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Flags: number;
    Protocol: number;
    Algorithm: number;
    PublicKey: string;
};

export interface dnsTypeMINFO{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Rmail: string;
    Email: string;
};

export interface dnsTypeNSEC3PARAM{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Hash: number;
    Flags: number;
    Iterations: number;
    SaltLength: number;
    Salt: string;
};

export interface dnsTypeRRSIG{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    TypeCovered: number;
    Algorithm: number;
    Labels: number;
    OrigTtl: number;
    Expiration: number;
    Inception: number;
    KeyTag: number;
    SignerName: string;
    Signature: string;
};

export interface dnsTypeSPF{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Txt: string;
};

export interface dnsTypeTXT{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Txt: string;
};

export interface dnsTypeCSYNC{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Serial: number;
    Flags: number;
    TypeBitMap: Array<number>;
};

export interface dnsTypeMG{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Mg: string;
};

export interface dnsTypeTKEY{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Algorithm: string;
    Inception: number;
    Expiration: number;
    Mode: number;
    Error: number;
    KeySize: number;
    Key: string;
    OtherLen: number;
    OtherData: string;
};

export interface dnsTypeCAA{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Flag: number;
    Tag: string;
    Value: string;
};

export interface dnsTypeISDN{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Address: string;
    SubAddress: string;
};

export interface dnsTypeSMIMEA{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Usage: number;
    Selector: number;
    MatchingType: number;
    Certificate: string;
};

export interface dnsTypeA{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    A: string;
};

export interface dnsTypeAVC{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Txt: string;
};

export interface dnsTypeDLV{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    KeyTag: number;
    Algorithm: number;
    DigestType: number;
    Digest: string;
};

export interface dnsTypeGID{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Gid: number;
};

export interface dnsTypeOPENPGPKEY{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    PublicKey: string;
};

export interface dnsTypeSRV{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Priority: number;
    Weight: number;
    Port: number;
    Target: string;
};

export interface dnsTypeSSHFP{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Algorithm: number;
    Type: number;
    FingerPrint: string;
};

export interface dnsTypeTA{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    KeyTag: number;
    Algorithm: number;
    DigestType: number;
    Digest: string;
};

export interface dnsTypeDNSKEY{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Flags: number;
    Protocol: number;
    Algorithm: number;
    PublicKey: string;
};

export interface dnsTypeMF{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Mf: string;
};

export interface dnsTypeNS{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Ns: string;
};

export interface dnsTypeNULL{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Data: string;
};

export interface dnsTypeRT{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Preference: number;
    Host: string;
};

export interface dnsTypeSIG{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    TypeCovered: number;
    Algorithm: number;
    Labels: number;
    OrigTtl: number;
    Expiration: number;
    Inception: number;
    KeyTag: number;
    SignerName: string;
    Signature: string;
};

export interface dnsTypeAFSDB{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Subtype: number;
    Hostname: string;
};

export interface dnsTypeAMTRELAY{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Precedence: number;
    GatewayType: number;
    GatewayAddr: string;
    GatewayHost: string;
};

export interface dnsTypeANY{
    Name: string;
    Rrtype: number;
    Class: number;
    Ttl: number;
    Rdlength: number;
};

export interface dnsTypeMR{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Mr: string;
};

export interface dnsTypeDHCID{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Digest: string;
};

export interface dnsTypeMD{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Md: string;
};

export interface dnsTypeNSEC{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    NextDomain: string;
    TypeBitMap: Array<number>;
};

export interface dnsTypeNXNAME{
    Name: string;
    Rrtype: number;
    Class: number;
    Ttl: number;
    Rdlength: number;
};

export interface dnsTypeTLSA{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Usage: number;
    Selector: number;
    MatchingType: number;
    Certificate: string;
};

export interface dnsTypeNID{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Preference: number;
    NodeID: number;
};

export interface dnsTypeNSAP_PTR{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Ptr: string;
};

export interface dnsTypeNXT{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    NextDomain: string;
    TypeBitMap: Array<number>;
};

export interface dnsTypeOPT{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Option: Array<EDNS0>;
};

export interface dnsTypePX{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Preference: number;
    Map822: string;
    Mapx400: string;
};

export interface dnsTypeX25{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    PSDNAddress: string;
};

export interface dnsTypeIPSECKEY{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Precedence: number;
    GatewayType: number;
    Algorithm: number;
    GatewayAddr: string;
    GatewayHost: string;
    PublicKey: string;
};

export interface dnsTypeKX{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Preference: number;
    Exchanger: string;
};

export interface dnsTypeL64{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Preference: number;
    Locator64: number;
};

export interface dnsTypeCDS{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    KeyTag: number;
    Algorithm: number;
    DigestType: number;
    Digest: string;
};

export interface dnsTypeEID{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Endpoint: string;
};

export interface dnsTypeHTTPS{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Priority: number;
    Target: string;
    Value: Array<SVCBKeyValue>;
};

export interface dnsTypeSOA{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Ns: string;
    Mbox: string;
    Serial: number;
    Refresh: number;
    Retry: number;
    Expire: number;
    Minttl: number;
};

export interface dnsTypeURI{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Priority: number;
    Weight: number;
    Target: string;
};

export interface dnsTypeCDNSKEY{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Flags: number;
    Protocol: number;
    Algorithm: number;
    PublicKey: string;
};

export interface dnsTypeEUI48{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Address: number;
};

export interface dnsTypeLOC{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Version: number;
    Size: number;
    HorizPre: number;
    VertPre: number;
    Latitude: number;
    Longitude: number;
    Altitude: number;
};

export interface dnsTypeMX{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Preference: number;
    Mx: string;
};

export interface dnsTypeTALINK{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    PreviousName: string;
    NextName: string;
};

export interface dnsTypeZONEMD{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Serial: number;
    Scheme: number;
    Hash: number;
    Digest: string;
};

export interface dnsTypeAPL{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Prefixes: Array<{
            Negation: boolean;
            Network: {
                IP: string;
                Mask: Array<number>;
            };
        }>;
};

export interface dnsTypeCERT{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Type: number;
    KeyTag: number;
    Algorithm: number;
    Certificate: string;
};

export interface dnsTypeLP{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Preference: number;
    Fqdn: string;
};

export interface dnsTypeMB{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Mb: string;
};

export interface dnsTypeNIMLOC{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Locator: string;
};

export interface dnsTypeSVCB{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Priority: number;
    Target: string;
    Value: Array<SVCBKeyValue>;
};

export interface dnsTypeDS{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    KeyTag: number;
    Algorithm: number;
    DigestType: number;
    Digest: string;
};

export interface dnsTypeEUI64{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Address: number;
};

export interface dnsTypeNSEC3{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Hash: number;
    Flags: number;
    Iterations: number;
    SaltLength: number;
    Salt: string;
    HashLength: number;
    NextDomain: string;
    TypeBitMap: Array<number>;
};

export interface dnsTypeRESINFO{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Txt: string;
};

export interface dnsTypeRKEY{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Flags: number;
    Protocol: number;
    Algorithm: number;
    PublicKey: string;
};

export interface dnsTypeNAPTR{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Order: number;
    Preference: number;
    Flags: string;
    Service: string;
    Regexp: string;
    Replacement: string;
};

export interface dnsTypeUID{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Uid: number;
};

export interface dnsTypeUINFO{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Uinfo: string;
};

export interface dnsTypeCNAME{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Target: string;
};

export interface dnsTypeHINFO{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Cpu: string;
    Os: string;
};

export interface dnsTypeNINFO{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    ZSData: Array<string>;
};

export interface dnsTypePTR{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Ptr: string;
};

export interface dnsTypeDNAME{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Target: string;
};

export interface dnsTypeGPOS{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Longitude: string;
    Latitude: string;
    Altitude: string;
};

export interface dnsTypeL32{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Preference: number;
    Locator32: string;
};

export interface dnsTypeRP{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Mbox: string;
    Txt: string;
};

export interface dnsTypeTSIG{
    Hdr: {
        Name: string;
        Rrtype: number;
        Class: number;
        Ttl: number;
        Rdlength: number;
    };
    Algorithm: string;
    TimeSigned: number;
    Fudge: number;
    MACSize: number;
    MAC: string;
    OrigId: number;
    Error: number;
    OtherLen: number;
    OtherData: string;
};

export interface dnsResource {
    a?: dnsTypeA;
    avc?: dnsTypeAVC;
    dlv?: dnsTypeDLV;
    gid?: dnsTypeGID;
    openpgpkey?: dnsTypeOPENPGPKEY;
    srv?: dnsTypeSRV;
    sshfp?: dnsTypeSSHFP;
    ta?: dnsTypeTA;
    dnskey?: dnsTypeDNSKEY;
    mf?: dnsTypeMF;
    ns?: dnsTypeNS;
    null?: dnsTypeNULL;
    rt?: dnsTypeRT;
    sig?: dnsTypeSIG;
    afsdb?: dnsTypeAFSDB;
    amtrelay?: dnsTypeAMTRELAY;
    any?: dnsTypeANY;
    mr?: dnsTypeMR;
    dhcid?: dnsTypeDHCID;
    md?: dnsTypeMD;
    nsec?: dnsTypeNSEC;
    nxname?: dnsTypeNXNAME;
    tlsa?: dnsTypeTLSA;
    nid?: dnsTypeNID;
    nsap_ptr?: dnsTypeNSAP_PTR;
    nxt?: dnsTypeNXT;
    opt?: dnsTypeOPT;
    px?: dnsTypePX;
    x25?: dnsTypeX25;
    ipseckey?: dnsTypeIPSECKEY;
    kx?: dnsTypeKX;
    l64?: dnsTypeL64;
    cds?: dnsTypeCDS;
    eid?: dnsTypeEID;
    https?: dnsTypeHTTPS;
    soa?: dnsTypeSOA;
    uri?: dnsTypeURI;
    cdnskey?: dnsTypeCDNSKEY;
    eui48?: dnsTypeEUI48;
    loc?: dnsTypeLOC;
    mx?: dnsTypeMX;
    talink?: dnsTypeTALINK;
    zonemd?: dnsTypeZONEMD;
    apl?: dnsTypeAPL;
    cert?: dnsTypeCERT;
    lp?: dnsTypeLP;
    mb?: dnsTypeMB;
    nimloc?: dnsTypeNIMLOC;
    svcb?: dnsTypeSVCB;
    ds?: dnsTypeDS;
    eui64?: dnsTypeEUI64;
    nsec3?: dnsTypeNSEC3;
    resinfo?: dnsTypeRESINFO;
    rkey?: dnsTypeRKEY;
    naptr?: dnsTypeNAPTR;
    uid?: dnsTypeUID;
    uinfo?: dnsTypeUINFO;
    cname?: dnsTypeCNAME;
    hinfo?: dnsTypeHINFO;
    ninfo?: dnsTypeNINFO;
    ptr?: dnsTypePTR;
    dname?: dnsTypeDNAME;
    gpos?: dnsTypeGPOS;
    l32?: dnsTypeL32;
    rp?: dnsTypeRP;
    tsig?: dnsTypeTSIG;
    aaaa?: dnsTypeAAAA;
    hip?: dnsTypeHIP;
    key?: dnsTypeKEY;
    minfo?: dnsTypeMINFO;
    nsec3param?: dnsTypeNSEC3PARAM;
    rrsig?: dnsTypeRRSIG;
    spf?: dnsTypeSPF;
    txt?: dnsTypeTXT;
    csync?: dnsTypeCSYNC;
    mg?: dnsTypeMG;
    tkey?: dnsTypeTKEY;
    caa?: dnsTypeCAA;
    isdn?: dnsTypeISDN;
    smimea?: dnsTypeSMIMEA;
};

export function nsrrtype(input: number | string): string {
    switch (input) {
        case "42":
        case 42:
            return "APL";
        case "60":
        case 60:
            return "CDNSKEY";
        case "37":
        case 37:
            return "CERT";
        case "29":
        case 29:
            return "LOC";
        case "9":
        case 9:
            return "MR";
        case "56":
        case 56:
            return "NINFO";
        case "2":
        case 2:
            return "NS";
        case "64":
        case 64:
            return "SVCB";
        case "255":
        case 255:
            return "ANY";
        case "34":
        case 34:
            return "ATMA";
        case "10":
        case 10:
            return "NULL";
        case "58":
        case 58:
            return "TALINK";
        case "249":
        case 249:
            return "TKEY";
        case "258":
        case 258:
            return "AVC";
        case "26":
        case 26:
            return "PX";
        case "33":
        case 33:
            return "SRV";
        case "103":
        case 103:
            return "UNSPEC";
        case "256":
        case 256:
            return "URI";
        case "63":
        case 63:
            return "ZONEMD";
        case "28":
        case 28:
            return "AAAA";
        case "253":
        case 253:
            return "MAILB";
        case "15":
        case 15:
            return "MX";
        case "104":
        case 104:
            return "NID";
        case "261":
        case 261:
            return "RESINFO";
        case "19":
        case 19:
            return "X25";
        case "252":
        case 252:
            return "AXFR";
        case "62":
        case 62:
            return "CSYNC";
        case "45":
        case 45:
            return "IPSECKEY";
        case "99":
        case 99:
            return "SPF";
        case "101":
        case 101:
            return "UID";
        case "102":
        case 102:
            return "GID";
        case "13":
        case 13:
            return "HINFO";
        case "51":
        case 51:
            return "NSEC3PARAM";
        case "30":
        case 30:
            return "NXT";
        case "0":
        case 0:
            return "None";
        case "46":
        case 46:
            return "RRSIG";
        case "250":
        case 250:
            return "TSIG";
        case "32769":
        case 32769:
            return "DLV";
        case "39":
        case 39:
            return "DNAME";
        case "3":
        case 3:
            return "MD";
        case "8":
        case 8:
            return "MG";
        case "14":
        case 14:
            return "MINFO";
        case "18":
        case 18:
            return "AFSDB";
        case "260":
        case 260:
            return "AMTRELAY";
        case "20":
        case 20:
            return "ISDN";
        case "36":
        case 36:
            return "KX";
        case "50":
        case 50:
            return "NSEC3";
        case "6":
        case 6:
            return "SOA";
        case "251":
        case 251:
            return "IXFR";
        case "106":
        case 106:
            return "L64";
        case "7":
        case 7:
            return "MB";
        case "44":
        case 44:
            return "SSHFP";
        case "32768":
        case 32768:
            return "TA";
        case "109":
        case 109:
            return "EUI64";
        case "17":
        case 17:
            return "RP";
        case "31":
        case 31:
            return "EID";
        case "105":
        case 105:
            return "L32";
        case "107":
        case 107:
            return "LP";
        case "41":
        case 41:
            return "OPT";
        case "12":
        case 12:
            return "PTR";
        case "21":
        case 21:
            return "RT";
        case "24":
        case 24:
            return "SIG";
        case "16":
        case 16:
            return "TXT";
        case "55":
        case 55:
            return "HIP";
        case "65":
        case 65:
            return "HTTPS";
        case "32":
        case 32:
            return "NIMLOC";
        case "128":
        case 128:
            return "NXNAME";
        case "57":
        case 57:
            return "RKEY";
        case "65535":
        case 65535:
            return "Reserved";
        case "4":
        case 4:
            return "MF";
        case "23":
        case 23:
            return "NSAP-PTR";
        case "1":
        case 1:
            return "A";
        case "257":
        case 257:
            return "CAA";
        case "5":
        case 5:
            return "CNAME";
        case "48":
        case 48:
            return "DNSKEY";
        case "43":
        case 43:
            return "DS";
        case "254":
        case 254:
            return "MAILA";
        case "35":
        case 35:
            return "NAPTR";
        case "47":
        case 47:
            return "NSEC";
        case "49":
        case 49:
            return "DHCID";
        case "25":
        case 25:
            return "KEY";
        case "61":
        case 61:
            return "OPENPGPKEY";
        case "52":
        case 52:
            return "TLSA";
        case "59":
        case 59:
            return "CDS";
        case "108":
        case 108:
            return "EUI48";
        case "27":
        case 27:
            return "GPOS";
        case "53":
        case 53:
            return "SMIMEA";
        case "100":
        case 100:
            return "UINFO";
        default:
            return "#";
    }
};

export function rdatatostr(rr: dnsRR): string {
    switch (rr.Hdr.Rrtype) {
        case 28: { const rec = rr as dnsTypeAAAA; return rec.AAAA.toString(); } // AAAA
        case 55: { const rec = rr as dnsTypeHIP; return [rec.HitLength.toString(), rec.PublicKeyAlgorithm.toString(), rec.PublicKeyLength.toString(), rec.Hit.toString(), rec.PublicKey.toString(), rec.RendezvousServers.join(' ')].join(' '); } // HIP
        case 25: { const rec = rr as dnsTypeKEY; return [rec.Flags.toString(), rec.Protocol.toString(), rec.Algorithm.toString(), rec.PublicKey.toString()].join(' '); } // KEY
        case 14: { const rec = rr as dnsTypeMINFO; return [rec.Rmail.toString(), rec.Email.toString()].join(' '); } // MINFO
        case 51: { const rec = rr as dnsTypeNSEC3PARAM; return [rec.Hash.toString(), rec.Flags.toString(), rec.Iterations.toString(), rec.SaltLength.toString(), rec.Salt.toString()].join(' '); } // NSEC3PARAM
        case 46: { const rec = rr as dnsTypeRRSIG; return [rec.TypeCovered.toString(), rec.Algorithm.toString(), rec.Labels.toString(), rec.OrigTtl.toString(), rec.Expiration.toString(), rec.Inception.toString(), rec.KeyTag.toString(), rec.SignerName.toString(), rec.Signature.toString()].join(' '); } // RRSIG
        case 99: { const rec = rr as dnsTypeSPF; return rec.Txt.toString(); } // SPF
        case 16: { const rec = rr as dnsTypeTXT; return rec.Txt.toString(); } // TXT
        case 62: { const rec = rr as dnsTypeCSYNC; return [rec.Serial.toString(), rec.Flags.toString(), rec.TypeBitMap.join(' ')].join(' '); } // CSYNC
        case 8: { const rec = rr as dnsTypeMG; return rec.Mg.toString(); } // MG
        case 249: { const rec = rr as dnsTypeTKEY; return [rec.Algorithm.toString(), rec.Inception.toString(), rec.Expiration.toString(), rec.Mode.toString(), rec.Error.toString(), rec.KeySize.toString(), rec.Key.toString(), rec.OtherLen.toString(), rec.OtherData.toString()].join(' '); } // TKEY
        case 257: { const rec = rr as dnsTypeCAA; return [rec.Flag.toString(), rec.Tag.toString(), rec.Value.toString()].join(' '); } // CAA
        case 20: { const rec = rr as dnsTypeISDN; return [rec.Address.toString(), rec.SubAddress.toString()].join(' '); } // ISDN
        case 53: { const rec = rr as dnsTypeSMIMEA; return [rec.Usage.toString(), rec.Selector.toString(), rec.MatchingType.toString(), rec.Certificate.toString()].join(' '); } // SMIMEA
        case 1: { const rec = rr as dnsTypeA; return rec.A.toString(); } // A
        case 258: { const rec = rr as dnsTypeAVC; return rec.Txt.toString(); } // AVC
        case 32769: { const rec = rr as dnsTypeDLV; return [rec.KeyTag.toString(), rec.Algorithm.toString(), rec.DigestType.toString(), rec.Digest.toString()].join(' '); } // DLV
        case 102: { const rec = rr as dnsTypeGID; return rec.Gid.toString(); } // GID
        case 61: { const rec = rr as dnsTypeOPENPGPKEY; return rec.PublicKey.toString(); } // OPENPGPKEY
        case 33: { const rec = rr as dnsTypeSRV; return [rec.Priority.toString(), rec.Weight.toString(), rec.Port.toString(), rec.Target.toString()].join(' '); } // SRV
        case 44: { const rec = rr as dnsTypeSSHFP; return [rec.Algorithm.toString(), rec.Type.toString(), rec.FingerPrint.toString()].join(' '); } // SSHFP
        case 32768: { const rec = rr as dnsTypeTA; return [rec.KeyTag.toString(), rec.Algorithm.toString(), rec.DigestType.toString(), rec.Digest.toString()].join(' '); } // TA
        case 48: { const rec = rr as dnsTypeDNSKEY; return [rec.Flags.toString(), rec.Protocol.toString(), rec.Algorithm.toString(), rec.PublicKey.toString()].join(' '); } // DNSKEY
        case 4: { const rec = rr as dnsTypeMF; return rec.Mf.toString(); } // MF
        case 2: { const rec = rr as dnsTypeNS; return rec.Ns.toString(); } // NS
        case 10: { const rec = rr as dnsTypeNULL; return rec.Data.toString(); } // NULL
        case 21: { const rec = rr as dnsTypeRT; return [rec.Preference.toString(), rec.Host.toString()].join(' '); } // RT
        case 24: { const rec = rr as dnsTypeSIG; return [rec.TypeCovered.toString(), rec.Algorithm.toString(), rec.Labels.toString(), rec.OrigTtl.toString(), rec.Expiration.toString(), rec.Inception.toString(), rec.KeyTag.toString(), rec.SignerName.toString(), rec.Signature.toString()].join(' '); } // SIG
        case 18: { const rec = rr as dnsTypeAFSDB; return [rec.Subtype.toString(), rec.Hostname.toString()].join(' '); } // AFSDB
        case 260: { const rec = rr as dnsTypeAMTRELAY; return [rec.Precedence.toString(), rec.GatewayType.toString(), rec.GatewayAddr.toString(), rec.GatewayHost.toString()].join(' '); } // AMTRELAY
        case 9: { const rec = rr as dnsTypeMR; return rec.Mr.toString(); } // MR
        case 49: { const rec = rr as dnsTypeDHCID; return rec.Digest.toString(); } // DHCID
        case 3: { const rec = rr as dnsTypeMD; return rec.Md.toString(); } // MD
        case 47: { const rec = rr as dnsTypeNSEC; return [rec.NextDomain.toString(), rec.TypeBitMap.join(' ')].join(' '); } // NSEC
        case 52: { const rec = rr as dnsTypeTLSA; return [rec.Usage.toString(), rec.Selector.toString(), rec.MatchingType.toString(), rec.Certificate.toString()].join(' '); } // TLSA
        case 104: { const rec = rr as dnsTypeNID; return [rec.Preference.toString(), rec.NodeID.toString()].join(' '); } // NID
        case 23: { const rec = rr as dnsTypeNSAP_PTR; return rec.Ptr.toString(); } // NSAP-PTR
        case 30: { const rec = rr as dnsTypeNXT; return [rec.NextDomain.toString(), rec.TypeBitMap.join(' ')].join(' '); } // NXT
        case 26: { const rec = rr as dnsTypePX; return [rec.Preference.toString(), rec.Map822.toString(), rec.Mapx400.toString()].join(' '); } // PX
        case 19: { const rec = rr as dnsTypeX25; return rec.PSDNAddress.toString(); } // X25
        case 45: { const rec = rr as dnsTypeIPSECKEY; return [rec.Precedence.toString(), rec.GatewayType.toString(), rec.Algorithm.toString(), rec.GatewayAddr.toString(), rec.GatewayHost.toString(), rec.PublicKey.toString()].join(' '); } // IPSECKEY
        case 36: { const rec = rr as dnsTypeKX; return [rec.Preference.toString(), rec.Exchanger.toString()].join(' '); } // KX
        case 106: { const rec = rr as dnsTypeL64; return [rec.Preference.toString(), rec.Locator64.toString()].join(' '); } // L64
        case 59: { const rec = rr as dnsTypeCDS; return [rec.KeyTag.toString(), rec.Algorithm.toString(), rec.DigestType.toString(), rec.Digest.toString()].join(' '); } // CDS
        case 31: { const rec = rr as dnsTypeEID; return rec.Endpoint.toString(); } // EID
        case 65: { const rec = rr as dnsTypeHTTPS; return [rec.Priority.toString(), rec.Target.toString(), rec.Value.join(' ')].join(' '); } // HTTPS
        case 6: { const rec = rr as dnsTypeSOA; return [rec.Ns.toString(), rec.Mbox.toString(), rec.Serial.toString(), rec.Refresh.toString(), rec.Retry.toString(), rec.Expire.toString(), rec.Minttl.toString()].join(' '); } // SOA
        case 256: { const rec = rr as dnsTypeURI; return [rec.Priority.toString(), rec.Weight.toString(), rec.Target.toString()].join(' '); } // URI
        case 60: { const rec = rr as dnsTypeCDNSKEY; return [rec.Flags.toString(), rec.Protocol.toString(), rec.Algorithm.toString(), rec.PublicKey.toString()].join(' '); } // CDNSKEY
        case 108: { const rec = rr as dnsTypeEUI48; return rec.Address.toString(); } // EUI48
        case 29: { const rec = rr as dnsTypeLOC; return [rec.Version.toString(), rec.Size.toString(), rec.HorizPre.toString(), rec.VertPre.toString(), rec.Latitude.toString(), rec.Longitude.toString(), rec.Altitude.toString()].join(' '); } // LOC
        case 15: { const rec = rr as dnsTypeMX; return [rec.Preference.toString(), rec.Mx.toString()].join(' '); } // MX
        case 58: { const rec = rr as dnsTypeTALINK; return [rec.PreviousName.toString(), rec.NextName.toString()].join(' '); } // TALINK
        case 63: { const rec = rr as dnsTypeZONEMD; return [rec.Serial.toString(), rec.Scheme.toString(), rec.Hash.toString(), rec.Digest.toString()].join(' '); } // ZONEMD
        case 42: { const rec = rr as dnsTypeAPL; return rec.Prefixes.map((a) => {
        let ret = "";

        if (a.Negation)
            ret += "!";

        if (a.Network.IP.indexOf(':'))
            ret += "2";
        else
            ret += "1";

        ret += ":";
        ret += a.Network.IP;
        ret += "/";
        ret += a.Network.Mask;
        return ret.length + ret;
    }).join(' '); } // APL
        case 37: { const rec = rr as dnsTypeCERT; return [rec.Type.toString(), rec.KeyTag.toString(), rec.Algorithm.toString(), rec.Certificate.toString()].join(' '); } // CERT
        case 107: { const rec = rr as dnsTypeLP; return [rec.Preference.toString(), rec.Fqdn.toString()].join(' '); } // LP
        case 7: { const rec = rr as dnsTypeMB; return rec.Mb.toString(); } // MB
        case 32: { const rec = rr as dnsTypeNIMLOC; return rec.Locator.toString(); } // NIMLOC
        case 64: { const rec = rr as dnsTypeSVCB; return [rec.Priority.toString(), rec.Target.toString(), rec.Value.join(' ')].join(' '); } // SVCB
        case 43: { const rec = rr as dnsTypeDS; return [rec.KeyTag.toString(), rec.Algorithm.toString(), rec.DigestType.toString(), rec.Digest.toString()].join(' '); } // DS
        case 109: { const rec = rr as dnsTypeEUI64; return rec.Address.toString(); } // EUI64
        case 50: { const rec = rr as dnsTypeNSEC3; return [rec.Hash.toString(), rec.Flags.toString(), rec.Iterations.toString(), rec.SaltLength.toString(), rec.Salt.toString(), rec.HashLength.toString(), rec.NextDomain.toString(), rec.TypeBitMap.join(' ')].join(' '); } // NSEC3
        case 261: { const rec = rr as dnsTypeRESINFO; return rec.Txt.toString(); } // RESINFO
        case 57: { const rec = rr as dnsTypeRKEY; return [rec.Flags.toString(), rec.Protocol.toString(), rec.Algorithm.toString(), rec.PublicKey.toString()].join(' '); } // RKEY
        case 35: { const rec = rr as dnsTypeNAPTR; return [rec.Order, rec.Preference, '"'+rec.Flags+'"', '"'+rec.Service+'"', '"'+rec.Regexp+'"', rec.Replacement].join(' '); } // NAPTR
        case 101: { const rec = rr as dnsTypeUID; return rec.Uid.toString(); } // UID
        case 100: { const rec = rr as dnsTypeUINFO; return rec.Uinfo.toString(); } // UINFO
        case 5: { const rec = rr as dnsTypeCNAME; return rec.Target.toString(); } // CNAME
        case 13: { const rec = rr as dnsTypeHINFO; return [rec.Cpu.toString(), rec.Os.toString()].join(' '); } // HINFO
        case 56: { const rec = rr as dnsTypeNINFO; return rec.ZSData.toString(); } // NINFO
        case 12: { const rec = rr as dnsTypePTR; return rec.Ptr.toString(); } // PTR
        case 39: { const rec = rr as dnsTypeDNAME; return rec.Target.toString(); } // DNAME
        case 27: { const rec = rr as dnsTypeGPOS; return [rec.Longitude.toString(), rec.Latitude.toString(), rec.Altitude.toString()].join(' '); } // GPOS
        case 105: { const rec = rr as dnsTypeL32; return [rec.Preference.toString(), rec.Locator32.toString()].join(' '); } // L32
        case 17: { const rec = rr as dnsTypeRP; return [rec.Mbox.toString(), rec.Txt.toString()].join(' '); } // RP
        case 250: { const rec = rr as dnsTypeTSIG; return [rec.Algorithm.toString(), rec.TimeSigned.toString(), rec.Fudge.toString(), rec.MACSize.toString(), rec.MAC.toString(), rec.OrigId.toString(), rec.Error.toString(), rec.OtherLen.toString(), rec.OtherData.toString()].join(' '); } // TSIG
        default: return 'unknown #' + rr.Hdr.Rrtype
    }
};

